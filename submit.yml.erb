<%
  groups = OodSupport::User.new.groups.map(&:name).select { |word| word.start_with?('p', 'b', 'a') }

  # your image location will differ
  ppn = num_cores.blank? ? 1 : num_cores.to_i
  walltime = (bc_num_hours.to_i * 60)
%>
---
batch_connect:
  template: basic
  websockify_cmd: '/usr/bin/websockify'
  script_wrapper: |
    module purge
    module load singularity
    module load <%= version %>
    module load <%= other_modules %>
    cat << "CTRSCRIPT" > container.sh
    export PATH="$PATH:/opt/TurboVNC/bin"
    %s  
    CTRSCRIPT

    export container_image=/software/openondemand/rstudio-server/rserver-ood.sif

    # Set working directory to home directory

    export SINGULARITYENV_RSTUDIO_SESSION_TIMEOUT=0
    R_HOME=$(R RHOME)
    R_VERSION=$(R --version | head -1 | awk '{print $3}')
    R_EXEC=`which R`

    # Need a unique /tmp for this job for /tmp/rstudio-rsession & /tmp/rstudio-server
    WORKDIR=${HOME}/rserver/${SLURM_JOB_ID}
    mkdir -m 700 -p ${WORKDIR}/tmp/rstudio-server  
    mkdir -p ${WORKDIR}/var/run/{lock/rstudio-server,rstudio-server/rstudio-rsession,mount,systemd} ${WORKDIR}/var/lib/rstudio-server ${WORKDIR}/logs/{rstudio,rstudio-server}
    uuidgen > ${WORKDIR}/tmp/rstudio-server/secure-cookie-key
    chmod 600 ${WORKDIR}/tmp/rstudio-server/secure-cookie-key

    cat >${WORKDIR}/rserver.conf <<END
    # Server Configuration File
    rsession-which-r=${R_EXEC}
    auth-timeout-minutes=0
    auth-stay-signed-in-days=10
    session-use-file-storage=1
    rsession-ld-library-path=${LD_LIBRARY_PATH}
    END

    # rsession needs to start with OMP_NUM_THREADS set to prevent OpenBLAS
    # (and any other OpenMP-enhanced libraries used by R) from spawning too many
    # threads. a wrapper script is created for rsession.
    #
    cat > ${WORKDIR}/rsession.sh <<END
    #!/bin/sh
    set -o xtrace
    R_DOC_DIR=$R_HOME/doc
    R_INCLUDE_DIR=$R_HOME/include
    R_SHARE_DIR=$R_HOME/share
    RSTUDIO_DEFAULT_R_VERSION_HOME=$R_HOME
    RSTUDIO_DEFAULT_R_VERSION=$R_VERSION
    PATH=$PATH:/usr/lib/rstudio-server/bin
    export OMP_NUM_THREADS=${SLURM_NPROCS}
    export MC_CORES=$((${SLURM_NPROCS}-1))
    /usr/lib/rstudio-server/bin/rsession "\${@}" 
    END

    chmod +x ${WORKDIR}/rsession.sh

    # [Rstudio 1.4] database is required
    cat > ${WORKDIR}/database.conf <<END
    provider=sqlite
    directory=/var/lib/rstudio-server
    END

    # [Rstudio 1.4] configure logging
    cat > ${WORKDIR}/logging.conf <<END
    [@rserver]
    log-level=info
    max-size-mb=10
    END

    ## some binds that are necessary for running with singularity
    export SING_BINDS=" --bind ${WORKDIR}/logs/rstudio-server:/var/log/rstudio-server --bind ${WORKDIR}/logs/rstudio:/var/log/rstudio --bind ${WORKDIR}/var/run:/var/run --bind ${WORKDIR}/var/lib/rstudio-server:/var/lib/rstudio-server  --bind ${WORKDIR}/tmp:/tmp"

    ## use our specific configs
    export SING_BINDS="$SING_BINDS --bind ${WORKDIR}/rserver.conf:/etc/rstudio/rserver.conf --bind ${WORKDIR}/database.conf:/etc/rstudio/database.conf --bind ${WORKDIR}/rsession.sh:/etc/rstudio/rsession.sh --bind ${WORKDIR}/logging.conf:/etc/rstudio/logging.conf"

    ## quest stuff
    export SING_BINDS="$SING_BINDS --bind /projects:/projects --bind /software:/software"

    # only bind /kellogg is individual is part of kellogg group
    export SING_BINDS="$SING_BINDS <%= groups.include?('kellogg') ? "--bind /kellogg/:/kellogg/" : "" %>"

    # only bind /scratch/<netid> if individual has a scratch space
    export SING_BINDS="$SING_BINDS <%= File.exist?("/scratch/#{User.new.name}") ? "--bind /scratch/#{User.new.name}:/scratch/#{User.new.name}" : "" %>"

    export SINGULARITYENV_PATH="$PATH"

    ## Need to add the --nv flag if we are running on a GPU
    <%- if gres_value != "" %>
    export SING_GPU="--nv"
    <%- else %>
    export SING_GPU=""
    <%- end %>

    singularity exec $SING_GPU $SING_BINDS "${container_image}" /bin/bash container.sh

  header: | 
    #!/bin/bash
        . ~/.bashrc

script:
   <%- if user_email != "" %>
   email_on_started: true
   <%- end %>
   native:
     # What partition is the user submitting to
     - "--partition"
     - "<%= slurm_partition %>"
     # Under what account is the user submitting this job
     - "--account"
     - "<%= slurm_account %>"
     # How much time (in hours)
     - "--time"
     - "<%= walltime %>"
     # How many nodes (always 1)
     <%- if number_of_nodes != "" %>
     - "--nodes"
     - "<%= number_of_nodes %>"
     <%- else %>
     - "--nodes"
     - "1"
     <%- end %>
     # How many CPUs
     - "--ntasks-per-node"
     - "<%= ppn %>"
     # How much memory
     - "--mem"
     - "<%= memory_per_node %>G"
     # Job Name
     - "--job-name"
     - "<%= job_name %>"
     # If the user supplies an e-mail, then they will get an e-mail when the job begins
     <%- if user_email != "" %>
     - "--mail-user"
     - "<%= user_email %>"
     <%- end %>
     # If the user requested a GPU, then we need to add this argument to our job submit command
     <%- if gres_value != "" %>
     - "--gres"
     - "<%= gres_value %>"
     <%- end %>
